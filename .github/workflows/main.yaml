name: Build and Deploy

on:
  push:
    branches:
      - "main"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

#       - name: Run Test Coverage
#         run: ./gradlew jacocoTestReport

#       - name: Generate JaCoCo Badge
#         uses: cicirello/jacoco-badge-generator@v2
#         with:
#           generate-branches-badge: true
#           jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

#       - name: Log coverage percentage
#         run: |
#           echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
#           echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
      - name: Build jar
        run: gradle bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
          
      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: | 
            docker pull hendralw/user-service:latest 
            docker run -d --restart unless-stopped --name user-service -p 8080:8080 -e SPRING.DATASOURCE.URL=jdbc:postgresql://34.172.56.91:5432/postgres -e SPRING.DATASOURCE.USERNAME=postgres -e SPRING.DATASOURCE.PASSWORD=postgres user-service:latest
